# Default values for zookeeper.
# Duplicate this file and put your customization here

## Cluster domain
clusterDomain: cluster.local

## Zookeeper's Configruation. 
zookeeper:

  ## All configs will use to create ConfigMap Object and mount as zookper config(zoo.cfg) file.
  ##
  # config: |

  ##
  ## Zookeeper service port
  ## the port to listen for client connections
  ##
  clientPort: 2181 

  ## ZooKeeper server use this port to connect folowers to the leader
  ##
  serverPort: 2888

  ## ZooKeeper use the this port for leader election
  ##
  leaderElectionPort: 3888
  ##
  ## communication time settings
  ## the basic time unit in milliseconds used by ZooKeeper. It is used to do heartbeats and the minimum session timeout will be twice the tickTime.
  ##
  tickTime: 2000

  ## InitLimit is timeouts ZooKeeper uses to limit the length of time the ZooKeeper servers in quorum have to connect to a leader
  ##
  initLimit: 5

  ## The entry syncLimit limits how far out of date a server can be from a leader.
  ##
  syncLimit: 2

  ## data and log path
  ## the location to store the in-memory database snapshots and, unless specified otherwise, the transaction log of updates to the database.
  ## the dataDis is put on "myid" file
  ##
  dataDir: /var/lib/zookeeper

  ## This option will direct the machine to write the transaction log to the dataLogDir rather than the dataDir. This allows a dedicated log device to be used, and helps avoid competition between logging and snaphots.
  ##
  dataLogDir: /var/log/zookeeper

  ## (No Java system property) Limits the number of concurrent connections (at the socket level) that a single client, identified by IP address, may make to a single member of the ZooKeeper ensemble. This is used to prevent certain classes of DoS attacks, including file descriptor exhaustion. 
  ## The default is 60. Setting this to 0 entirely removes the limit on concurrent connections.
  maxClientCnxns: 60

  ## A list of comma separated Four Letter Words commands that user wants to use. 
  ##
  fourlwCommandsWhitelist: srvr, mntr

  ## Size in MB for the Java Heap options (Xmx and XMs). This env var is ignored if Xmx an Xms are configured via JVMFLAGS
  ##
  heapSize: 1024

  ## Log level for the Zookeeper server. ERROR by default. Have in mind if you set it to INFO or WARN the ReadinessProve will produce a lot of logs.
  ##
  logLevel: ERROR

## Kubernetes configurations
## ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.15/#statefulsetspec-v1-apps

##
## StatefulSet allows you to relax its ordering guarantees while preserving its uniqueness and identity guarantees.
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
podManagementPolicy: Parallel

##
## replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.
replicas: 3

##
## StatefulSet's .spec.updateStrategy field allows you to configure and disable automated rolling updates for containers, labels, resource request/limits, and annotations for the Pods in a StatefulSet.
updateStrategy: 
  type: "RollingUpdate"

##
## volumeClaimTemplates is a list of claims that pods are allowed to reference. 
## The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod.
## Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. 
## A claim in this list takes precedence over any volumes in the template, with the same name.
volumeClaimTemplates:
  ##
  ## If true, use a Persistent Volume Cliam, If false, use emptyDir. For a storage-care statefulset, it is recommanded setting true.
  enable: true
  ##
  ## The volume will be mount at the data dir.If false, use emptyDir.
  dataPersistence:
    enable: true
    # storgeClass: "-"
    annotations: {}
    accessModes:
    - ReadWriteOnce
    size: 20Gi
  ##
  ## The volume will be mount at the log dir.If false, use emptyDir.
  logPersistence:
    enable: true
    # storageClass: "-"
    annotations: {}
    accessModes:
    - ReadWriteOnce
    size: 50Gi

##
## PodTemplateSpec

##
## Zookeeper Node selector and tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature
nodeSelector: {"beta.kubernetes.io/arch": "amd64"}
tolerations: []
affinity: {}
# podAntiAffinity:
#   requiredDuringSchedulingIgnoredDuringExecution:
#     - labelSelector:
#         matchExpressions:
#           - key: "app"
#             operator: In
#             values:
#             - zk

##
## ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. 
## If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. 
## ref: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
imagePullSecrets: []

##
## Pod Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
podSecurityContext: {}

##
## Pods Service Account
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

##
## ContainerSpec

##
## zookeeper image configuration
image:
  registry: docker.io
  name: "zookeeper"
  tag: "3.5.5"
  pullPolicy: IfNotPresent

##
## Security options the pod should run with.
## ref: https://kubernetes.io/docs/concepts/policy/security-context/ 
securityContext: 
  enable: true
  runAsUser: 1000
  fsGroup: 1000
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

##
## Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. 
## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
livenessProbe:
  enable: true
  failureThreshold: 3
  periodSeconds: 30
  successThreshold: 1
  initialDelaySeconds: 10
  timeoutSeconds: 5

##
## Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. 
## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
readinessProbe:
  enable: true
  failureThreshold: 3
  periodSeconds: 30
  successThreshold: 1
  initialDelaySeconds: 10
  timeoutSeconds: 5

##
## the request and limit resources for eche instance
## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
resources: 
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi